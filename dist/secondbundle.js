(()=>{"use strict";var n={855:(n,t,a)=>{function e(){return'\n    <span class="dropdown-item" id="add-project-div" data-project="" data-bs-toggle="modal" data-bs-target="#add-project-modal"><i>Add New Project</i></span>\n    '}a.d(t,{E:()=>e})},870:(n,t,a)=>{n.exports=a.p+"84beabaabbcffb32f29f.png"}},t={};function a(e){var r=t[e];if(void 0!==r)return r.exports;var o=t[e]={exports:{}};return n[e](o,o.exports,a),o.exports}a.d=(n,t)=>{for(var e in t)a.o(t,e)&&!a.o(n,e)&&Object.defineProperty(n,e,{enumerable:!0,get:t[e]})},a.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),a.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;a.g.importScripts&&(n=a.g.location+"");var t=a.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var e=t.getElementsByTagName("script");e.length&&(n=e[e.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),a.p=n})(),(()=>{var n=a(855),t=a(870);!function(){let a=document.createElement("div");a.classList.add("container"),a.innerHTML=`\n    <nav class="navbar navbar-expand-sm text-light navbar-dark">\n    <div class="container-fluid">\n    <span class="navbar-brand mb-0 h1 mx-3">\n    <img src="${t}" id="icon">\n    <span>Organize</span>\n    </span>\n    \n    <button class="navbar-toggler mx-2" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavDropdown" aria-controls="navbarNavDropdown" aria-expanded="false" aria-label="Toggle navigation">\n      <span class="navbar-toggler-icon"></span>\n    </button>\n    <div class="collapse navbar-collapse" id="navbarNavDropdown">\n  <div class="nav-item dropdown">\n  <div class="nav-link dropdown-toggle text-light" href="#" id="navbarDropdownMenuLink" role="button" data-bs-toggle="dropdown" aria-expanded="false">\n    Projects\n  </div>\n  <ul class="dropdown-menu" aria-labelledby="navbarDropdownMenuLink" id="project-holder">\n    <li>${(0,n.E)()}</li>\n  </ul>\n</div>\n</div>\n\n    </div>\n    </nav>\n    `}();const e=(()=>{const n=JSON.parse(window.localStorage.getItem("projects"));return{saveData:function(){window.localStorage.setItem("projects",JSON.stringify(r.getProjects()))},getData:function(){return n}}})(),r=(()=>{let n;return n=null===e.getData()?[]:e.getData(),{addProject:function(t){n.push(t)},deleteProject:function(t){n.splice(t,1)},getLength:function(){return n.length},getProjects:function(){return n},getCurrentIndex:function(){return n.length-1}}})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,